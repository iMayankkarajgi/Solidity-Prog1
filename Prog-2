//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.5 <0.9.0

contract crowdfunding
{
  mapping(address=>uint)public contributors;
  address public manager;
  uint public mincontribution;
  uint public deadline;
  uint public target;
  uint public raisedamount;
  uint public noofcontributers;
  
  struct request{
   string description;
   address payable reciptents;
   uint value;
   bool completed;
   uint noofvoters;
   mapping(address=>bool) voters;
  } 
  mapping(uint=>request) public requests;
  uint public numrequest;

  constructor(uint _target,uint _deadline)
  {
   target=_target;
   deadline=block.timestamp+_deadline;
   mincontribution=100 wei;
   manager=msg.sender;
   }
   function sendether() public payable
   {
     require(block.timestamp<deadline," deadline has passed");
     require(msg.value<mincontribution,"Minimum contribution has not met");
     if(contributors[msg.sender]==0)
     {
      noofcontributers++;
    }
    contributors[msg.sender]+=msg.value;
    raisedamount+=msg.value;
    }
    function getcontractbalance() public view returns(uint)
    {
    return address(this).balance;
    }
    function refund() public
    {
      require(block.timestamp>deadline && raisedamount<target,"you are not eligible for refund");
      require(contributors[msg.sender]>0);
      address payable user=payable(msg.sender);
      user.transfer(contributors[msg.sender]);
      contributors[msg.sender]=0;

     }

}
